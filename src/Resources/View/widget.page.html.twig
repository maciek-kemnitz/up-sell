<style>
    .modal {
        position: fixed;
        top: 10%;
        left: 50%;
        z-index: 1050;
        width: 560px;
        margin-left: -280px;
        background-color: #ffffff;
        border: 1px solid #999;
        border: 1px solid rgba(0, 0, 0, 0.3);
        *border: 1px solid #999;
        -webkit-border-radius: 6px;
        -moz-border-radius: 6px;
        border-radius: 6px;
        outline: none;
        -webkit-box-shadow: 0 3px 7px rgba(0, 0, 0, 0.3);
        -moz-box-shadow: 0 3px 7px rgba(0, 0, 0, 0.3);
        box-shadow: 0 3px 7px rgba(0, 0, 0, 0.3);
        -webkit-background-clip: padding-box;
        -moz-background-clip: padding-box;
        background-clip: padding-box;
    }

    .modal.fade {
        top: -25%;
        -webkit-transition: opacity 0.3s linear, top 0.3s ease-out;
        -moz-transition: opacity 0.3s linear, top 0.3s ease-out;
        -o-transition: opacity 0.3s linear, top 0.3s ease-out;
        transition: opacity 0.3s linear, top 0.3s ease-out;
    }

    .modal.fade.in {
        top: 10%;
    }

    .modal-header {
        padding: 9px 15px;
        border-bottom: 1px solid #eee;
    }

    .modal-header .close {
        margin-top: 2px;
    }

    .modal-header h3 {
        margin: 0;
        line-height: 30px;
    }

    .modal-body {
        position: relative;
        max-height: 400px;
        padding: 15px;
        overflow-y: auto;
    }

    .modal-form {
        margin-bottom: 0;
    }

    .modal-footer {
        padding: 14px 15px 15px;
        margin-bottom: 0;
        text-align: right;
        background-color: #f5f5f5;
        border-top: 1px solid #ddd;
        -webkit-border-radius: 0 0 6px 6px;
        -moz-border-radius: 0 0 6px 6px;
        border-radius: 0 0 6px 6px;
        *zoom: 1;
        -webkit-box-shadow: inset 0 1px 0 #ffffff;
        -moz-box-shadow: inset 0 1px 0 #ffffff;
        box-shadow: inset 0 1px 0 #ffffff;
    }

    .modal-footer:before,
    .modal-footer:after {
        display: table;
        line-height: 0;
        content: "";
    }

    .modal-footer:after {
        clear: both;
    }

    .modal-footer .btn + .btn {
        margin-bottom: 0;
        margin-left: 5px;
    }

    .modal-footer .btn-group .btn + .btn {
        margin-left: -1px;
    }

    .modal-footer .btn-block + .btn-block {
        margin-left: 0;
    }
</style>

<div id="up-sell-modal" class="modal hide fade">
    <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
        <h3>{{ upSell.getHeadline() }}</h3>
    </div>
    <div class="modal-body">
        <p>{{ upSell.getDescription() }}</p>
        <div>
            {% for product in products %}
                <div>
                    <img src="{{ product.getImgUrl() }}"/>
                    <h4>{{ product.getName() }}</h4>
                    <h4>Price: <span class="muted">{{ product.getOriginalPrice() }}</span></h4>
                </div>

            {% endfor %}
        </div>
    </div>
    <div class="modal-footer">
        <a href="#" class="btn" data-dismiss="modal">Close</a>
        <a href="#" class="btn btn-primary">Save changes</a>
    </div>
</div>
    {#<h4>{{ id }}</h4>#}
    {#<h4>{{ up_sell_id }}</h4>#}



{#<script type="text/javascript">#}
{#var Modal = function (element, options) {#}
    {#this.options = options#}
    {#this.$element = $(element)#}
            {#.delegate('[data-dismiss="modal"]', 'click.dismiss.modal', $.proxy(this.hide, this))#}
    {#this.options.remote && this.$element.find('.modal-body').load(this.options.remote)#}
{#}#}

{#Modal.prototype = {#}

    {#constructor: Modal#}

    {#, toggle: function () {#}
        {#return this[!this.isShown ? 'show' : 'hide']()#}
    {#}#}

    {#, show: function () {#}
        {#var that = this#}
                {#, e = $.Event('show')#}

        {#this.$element.trigger(e)#}

        {#if (this.isShown || e.isDefaultPrevented()) return#}

        {#this.isShown = true#}

        {#this.escape()#}

        {#this.backdrop(function () {#}
            {#var transition = $.support.transition && that.$element.hasClass('fade')#}

            {#if (!that.$element.parent().length) {#}
                {#that.$element.appendTo(document.body) //don't move modals dom position#}
            {#}#}

            {#that.$element.show()#}

            {#if (transition) {#}
                {#that.$element[0].offsetWidth // force reflow#}
            {#}#}

            {#that.$element#}
                    {#.addClass('in')#}
                    {#.attr('aria-hidden', false)#}

            {#that.enforceFocus()#}

            {#transition ?#}
                    {#that.$element.one($.support.transition.end, function () { that.$element.focus().trigger('shown') }) :#}
                    {#that.$element.focus().trigger('shown')#}

        {#})#}
    {#}#}

    {#, hide: function (e) {#}
        {#e && e.preventDefault()#}

        {#var that = this#}

        {#e = $.Event('hide')#}

        {#this.$element.trigger(e)#}

        {#if (!this.isShown || e.isDefaultPrevented()) return#}

        {#this.isShown = false#}

        {#this.escape()#}

        {#$(document).off('focusin.modal')#}

        {#this.$element#}
                {#.removeClass('in')#}
                {#.attr('aria-hidden', true)#}

        {#$.support.transition && this.$element.hasClass('fade') ?#}
                {#this.hideWithTransition() :#}
                {#this.hideModal()#}
    {#}#}

    {#, enforceFocus: function () {#}
        {#var that = this#}
        {#$(document).on('focusin.modal', function (e) {#}
            {#if (that.$element[0] !== e.target && !that.$element.has(e.target).length) {#}
                {#that.$element.focus()#}
            {#}#}
        {#})#}
    {#}#}

    {#, escape: function () {#}
        {#var that = this#}
        {#if (this.isShown && this.options.keyboard) {#}
            {#this.$element.on('keyup.dismiss.modal', function ( e ) {#}
                {#e.which == 27 && that.hide()#}
            {#})#}
        {#} else if (!this.isShown) {#}
            {#this.$element.off('keyup.dismiss.modal')#}
        {#}#}
    {#}#}

    {#, hideWithTransition: function () {#}
        {#var that = this#}
                {#, timeout = setTimeout(function () {#}
                    {#that.$element.off($.support.transition.end)#}
                    {#that.hideModal()#}
                {#}, 500)#}

        {#this.$element.one($.support.transition.end, function () {#}
            {#clearTimeout(timeout)#}
            {#that.hideModal()#}
        {#})#}
    {#}#}

    {#, hideModal: function () {#}
        {#var that = this#}
        {#this.$element.hide()#}
        {#this.backdrop(function () {#}
            {#that.removeBackdrop()#}
            {#that.$element.trigger('hidden')#}
        {#})#}
    {#}#}

    {#, removeBackdrop: function () {#}
        {#this.$backdrop && this.$backdrop.remove()#}
        {#this.$backdrop = null#}
    {#}#}

    {#, backdrop: function (callback) {#}
        {#var that = this#}
                {#, animate = this.$element.hasClass('fade') ? 'fade' : ''#}

        {#if (this.isShown && this.options.backdrop) {#}
            {#var doAnimate = $.support.transition && animate#}

            {#this.$backdrop = $('<div class="modal-backdrop ' + animate + '" />')#}
                    {#.appendTo(document.body)#}

            {#this.$backdrop.click(#}
                    {#this.options.backdrop == 'static' ?#}
                            {#$.proxy(this.$element[0].focus, this.$element[0])#}
                            {#: $.proxy(this.hide, this)#}
            {#)#}

            {#if (doAnimate) this.$backdrop[0].offsetWidth // force reflow#}

            {#this.$backdrop.addClass('in')#}

            {#if (!callback) return#}

            {#doAnimate ?#}
                    {#this.$backdrop.one($.support.transition.end, callback) :#}
                    {#callback()#}

        {#} else if (!this.isShown && this.$backdrop) {#}
            {#this.$backdrop.removeClass('in')#}

            {#$.support.transition && this.$element.hasClass('fade')?#}
                    {#this.$backdrop.one($.support.transition.end, callback) :#}
                    {#callback()#}

        {#} else if (callback) {#}
            {#callback()#}
        {#}#}
    {#}#}
{#}#}


{#/* MODAL PLUGIN DEFINITION#}
 {#* ======================= */#}

{#var old = $.fn.modal#}

{#$.fn.modal = function (option) {#}
    {#return this.each(function () {#}
        {#var $this = $(this)#}
                {#, data = $this.data('modal')#}
                {#, options = $.extend({}, $.fn.modal.defaults, $this.data(), typeof option == 'object' && option)#}
        {#if (!data) $this.data('modal', (data = new Modal(this, options)))#}
        {#if (typeof option == 'string') data[option]()#}
        {#else if (options.show) data.show()#}
    {#})#}
{#}#}

{#$.fn.modal.defaults = {#}
    {#backdrop: true#}
    {#, keyboard: true#}
    {#, show: true#}
{#}#}

{#$.fn.modal.Constructor = Modal#}


{#/* MODAL NO CONFLICT#}
 {#* ================= */#}

{#$.fn.modal.noConflict = function () {#}
    {#$.fn.modal = old#}
    {#return this#}
{#}#}


{#/* MODAL DATA-API#}
 {#* ============== */#}

{#$(document).on('click.modal.data-api', '[data-toggle="modal"]', function (e) {#}
    {#var $this = $(this)#}
            {#, href = $this.attr('href')#}
            {#, $target = $($this.attr('data-target') || (href && href.replace(/.*(?=#[^\s]+$)/, ''))) //strip for ie7#}
            {#, option = $target.data('modal') ? 'toggle' : $.extend({ remote:!/#/.test(href) && href }, $target.data(), $this.data())#}

    {#e.preventDefault()#}

    {#$target#}
            {#.modal(option)#}
            {#.one('hide', function () {#}
                {#$this.focus()#}
            {#})#}
{#})#}

{#}(window.jQuery);#}
{#</script>#}